// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  product Product[]

  @@map("cateogory")
}

model Product {
  id            String         @id @default(uuid())
  title         String
  description   String
  inStock       Int
  price         Float          @default(0)
  sizes         Size[]         @default([])
  slug          String         @unique
  tags          String[]       @default([])
  gender        Gender
  category      Category       @relation(fields: [categoryId], references: [id])
  categoryId    String         @map("category_id")
  productImages ProductImage[]

  @@index([gender])
  @@map("product")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @map("product_id")

  @@map("product_image")
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?    @map("email_verified")
  password      String
  role          Role         @default(user)
  image         String?
  userAddress   UserAddress?

  @@map("user")
}

model Country {
  id          String        @id
  name        String
  userAddress UserAddress[]

  @@map("country")
}

model UserAddress {
  id                String  @id @default(uuid())
  firstName         String  @map("first_name")
  lastName          String  @map("last_name")
  address           String
  additionalAddress String? @map("additional_address")
  postalCode        String  @map("postal code")
  phone             String
  city              String

  // Relaciones
  country   Country @relation(fields: [countryId], references: [id])
  countryId String  @map("country_id")
  user      User    @relation(fields: [userId], references: [id])
  userId    String  @unique @map("user_id")

  @@map("user_address")
}
